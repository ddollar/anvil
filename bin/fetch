#!/bin/bash

# fail fast
set -o errexit
set -o pipefail

id=$1

echo() {
  /bin/echo "$1" "$2"
}

error() {
  /bin/echo $* >&2; exit 1
}

# get root dir
root_dir=$(pwd)

# create a temporary compile directory
compile_dir=$(mktemp -t compile_XXXXX)
rm -rf $compile_dir
mkdir -p $compile_dir

source_anchor=${1#*#}
source_url=${1%%#*}
if [ "$source_anchor" == "$source_url" ]; then
  source_anchor=""
fi

echo "done" >&2
echo -n "Preparing app for compilation... " >&2

# fetching app
case $source_url in
  *.json)
    manifest=$(mktemp -t manifest_XXXXX)
    curl -f -Ls $source_url -o $manifest
    $root_dir/bin/download_manifest $manifest $compile_dir >/dev/null
    ;;
  *.git)
    git clone "$source_url" "$compile_dir" --recursive --depth 1 >/dev/null 2>/dev/null || \
      error "failed, could not clone $source_url"
    if [ "$source_anchor" != "" ]; then
      cd $compile_dir >/dev/null 2>&1
      git checkout "$source_anchor" >/dev/null 2>&1 || \
        error "failed, no such ref: $source_anchor"
      cd - >/dev/null 2>&1
    fi
    rm -rf $compile_dir/.git
    ;;
  *.tar.gz|*.tgz)
    tarball=$(mktemp -t tarball_XXXXX)
    curl -f -Ls $source_url -o $tarball
    cd $compile_dir >/dev/null 2>&1
    tar xzf $tarball
    cd - >/dev/null 2>&1
    ;;
  *.tar.bz2|*.tbz|*.tbz2)
    tarball=$(mktemp -t tarball_XXXXX)
    curl -f -Ls $source_url -o $tarball
    cd $compile_dir >/dev/null 2>&1
    tar xjf $tarball
    cd - >/dev/null 2>&1
    ;;
  *.war)
    war=$(mktemp -t war_XXXXX)
    curl -f -Ls $source_url -o $war
    cd $compile_dir >/dev/null 2>&1
    jar xf $war
    cd - >/dev/null 2>&1
    ;;
  *)
    error "failed, unknown source type: $source_url"
    ;;
esac

echo "done" >&2

echo $compile_dir
